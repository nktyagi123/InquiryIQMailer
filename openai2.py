import os
from openai import AzureOpenAI
import json
import streamlit as st

client = AzureOpenAI(
    azure_endpoint = "https://open-ai-xamar-eus.openai.azure.com/openai/deployments/gpt-35-turbo/chat/completions?api-version=2023-09-15-preview",
    api_key="d417163c5acb4267ae45e136561057db",  
    api_version="2023-09-15-preview"
)


def ask_question(question):
    """
    This function sends a question to the Azure OpenAI API and returns the answer.

    Args:
        question: The question to be asked.

    Returns:
        The answer generated by the Azure OpenAI API, potentially including an Elasticsearch query.
    """
    prompt = """You are an expert in understanding and translating user intent into clear and concise queries!

**Instruction:**

1. Analyze the user's question to understand the data they are looking for in the Elasticsearch index.
2. Formulate a well-structured Elasticsearch query that retrieves the relevant data.
3. If possible, provide additional insights or explanations based on the retrieved data (limited by Azure OpenAI capabilities).

**User Question:**
""" + question + """
"""

    response = client.chat.completions.create(
        model="text-davinci-003",  # Adjust model as needed
        prompt=prompt,
    )
    return response.choices[0].message.content.strip()



def main():
    # Streamlit app logic

    question = st.text_input("Input: ", key="input")
    submit = st.button("Ask the question", key="ask_button")

    if submit:
        response = ask_question(question)
        st.info("Response:**\n" + response)

        # Parse the response (assuming Azure OpenAI provides an Elasticsearch query)
        try:
            # This part might require adjustments based on Azure OpenAI's response format
            response_parts = response.split("\n\n")
            elasticsearch_query = None
            for part in response_parts:
                if part.lower().startswith("elasticsearch query:"):
                    elasticsearch_query = part.split(":")[1].strip()
                    break

            if elasticsearch_query:
                # Simulate data retrieval from Elasticsearch (replace with actual implementation)
                print(f"Elasticsearch Query: {elasticsearch_query}")
                # This would typically involve connecting to your Elasticsearch cluster and executing the query
                # You'd then process and display the retrieved data

        except Exception as e:
            print(f"Error parsing response: {e}")

        st.write("**Note:** Due to limitations of Azure OpenAI, data retrieval and insights might be limited.")


if __name__ == "__main__":
    main()
